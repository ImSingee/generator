package generator

import (
	"bytes"
	"fmt"
	"github.com/ImSingee/god/utils"
	"github.com/spf13/viper"
)

var setterTemplate = utils.GetTemplate("setter", `
// Code generated by god setter, DO NOT EDIT.

package {{ $.pkg }}

{{ $.struct.ImportedStatements }}

{{ range $_, $field := $.struct.Fields }}
{{ if $field.WillGenerateSetter }}
func ({{ $.struct.ShortName }} *{{ $.struct.Name }}) {{ $field.SetterName }}({{ $field.Name }} {{ $field.Type }})  {
	{{ $.struct.ShortName }}.{{ $field.Name }} = {{ $field.Name }}
}
{{ end }}
{{ end }}
`)

func GenerateSetter(s *utils.Struct) ([]byte, error) {
	packageName := viper.GetString("gopackage")

	w := bytes.NewBuffer(make([]byte, 0, 1024))

	err := setterTemplate.Execute(w, map[string]interface{}{
		"pkg":    packageName,
		"struct": s,
	})

	if err != nil {
		return nil, err
	}

	return w.Bytes(), nil
}

func GenerateSetters(structs utils.Structs) (map[*utils.Struct][]byte, error) {
	results := make(map[*utils.Struct][]byte, len(structs))

	for _, s := range structs {
		result, err := GenerateSetter(s)

		if err != nil {
			return nil, fmt.Errorf("cannot generate setter for struct %s: %w", s.Name, err)
		}

		results[s] = result
	}

	return results, nil
}
